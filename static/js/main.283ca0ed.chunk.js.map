{"version":3,"sources":["functions/index.js","reducers/changeGameModeReducer.js","reducers/index.js","actions/types.js","components/Header.jsx","components/Stripe.jsx","components/SquareDisplay.jsx","components/Squares.jsx","components/App.jsx","actions/index.js","index.js"],"names":["randomColor","r","Math","ceil","random","g","b","concat","getRandomColors","numSquares","rc","i","Object","toConsumableArray","pickWinningColor","INITIAL_STATE","mode","numS","pickedColor","colors","combineReducers","gameMode","state","arguments","length","undefined","action","type","objectSpread","payload","Header","_ref","props","react_default","a","createElement","id","Stripe","onClick","newGame","changeMode","value","className","SquareDisplay","children","Squares","divStyle","backgroundColor","square","squareChoice","style","App","onModeSelect","event","modeButtons","document","querySelectorAll","resetButton","querySelector","messageDisplay","h1","textContent","classList","remove","updates","_this","target","add","changeGameMode","renderList","map","bgColor","components_Squares","key","onSquareClick","changeColorsWin","winningColor","squares","onResetButtonClick","newColors","newWinColor","components_Header","this","components_Stripe","components_SquareDisplay","Component","connect","newMode","newNumS","newPickedColor","curMode","curNumS","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","src_components_App"],"mappings":"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","file":"static/js/main.283ca0ed.chunk.js","sourcesContent":["const randomColor = () => {\r\n\tlet r = Math.ceil(Math.random() * 256);\r\n\tlet g = Math.ceil(Math.random() * 256);\r\n\tlet b = Math.ceil(Math.random() * 256);\r\n\treturn `rgb(${r}, ${g}, ${b})`;\r\n};\r\n\r\nexport const getRandomColors = (numSquares) => {\r\n\tlet rc = [];\r\n\tfor (let i = 0; i < numSquares; i++) {\r\n\t\trc = [ ...rc, randomColor() ];\r\n\t}\r\n\treturn rc;\r\n};\r\n\r\nexport const pickWinningColor = (numSquares) => {\r\n\treturn Math.ceil(Math.random() * numSquares - 1);\r\n};\r\n","import { CHANGE_GAME_MODE, NEW_GAME } from '../actions/types';\r\nimport { getRandomColors, pickWinningColor } from '../functions';\r\n\r\nconst INITIAL_STATE = {\r\n\tmode        : 'Hard',\r\n\tnumS        : 6,\r\n\tpickedColor : pickWinningColor(6),\r\n\tcolors      : getRandomColors(6),\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_GAME_MODE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmode        : action.payload.mode,\r\n\t\t\t\tnumS        : action.payload.numS,\r\n\t\t\t\tpickedColor : action.payload.pickedColor,\r\n\t\t\t\tcolors      : action.payload.colors,\r\n\t\t\t};\r\n\t\tcase NEW_GAME:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmode        : action.payload.mode,\r\n\t\t\t\tnumS        : action.payload.numS,\r\n\t\t\t\tpickedColor : action.payload.pickedColor,\r\n\t\t\t\tcolors      : action.payload.colors,\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport changeGameModeReducer from './changeGameModeReducer';\r\n\r\nexport default combineReducers({\r\n\tgameMode : changeGameModeReducer,\r\n});\r\n","export const CHANGE_GAME_MODE = 'CHANGE_GAME_MODE';\r\nexport const NEW_GAME = 'NEW_GAME';\r\n","import React from 'react';\r\n\r\nconst Header = ({ props }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>\r\n\t\t\t\tThe Great<br />\r\n\t\t\t\t<span id='colorDisplay'>{props.colors[props.pickedColor]}</span>\r\n\t\t\t\t<br />Game\r\n\t\t\t</h1>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Stripe = (props) => {\r\n\treturn (\r\n\t\t<div id='stripe'>\r\n\t\t\t<button id='reset' onClick={props.newGame}>\r\n\t\t\t\tNew Colors\r\n\t\t\t</button>\r\n\t\t\t<span id='message' />\r\n\t\t\t<button onClick={props.changeMode} value='Easy' className='mode'>\r\n\t\t\t\tEasy\r\n\t\t\t</button>\r\n\t\t\t<button onClick={props.changeMode} value='Hard' className='mode selected'>\r\n\t\t\t\tHard\r\n\t\t\t</button>\r\n\t\t\t<button onClick={props.changeMode} value='Expert' className='mode'>\r\n\t\t\t\tExpert\r\n\t\t\t</button>\r\n\t\t\t<button onClick={props.changeMode} value='Master' className='mode'>\r\n\t\t\t\tMaster\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Stripe;\r\n","import React from 'react';\r\n\r\nconst SquareDisplay = (props) => {\r\n\treturn <div id='container'>{props.children()}</div>;\r\n};\r\n\r\nexport default SquareDisplay;\r\n","import React from 'react';\r\n\r\nconst Squares = (props) => {\r\n\tlet divStyle = { backgroundColor: props.square };\r\n\treturn <div onClick={props.squareChoice} className='square' style={divStyle} />;\r\n};\r\n\r\nexport default Squares;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameMode, newGame } from '../actions';\r\nimport { getRandomColors, pickWinningColor } from '../functions';\r\nimport Header from './Header';\r\nimport Stripe from './Stripe';\r\nimport SquareDisplay from './SquareDisplay';\r\nimport Squares from './Squares';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tonModeSelect = (event) => {\r\n\t\tlet modeButtons = document.querySelectorAll('.mode');\r\n\t\tlet resetButton = document.querySelector('#reset');\r\n\t\tlet messageDisplay = document.querySelector('#message');\r\n\t\tlet h1 = document.querySelector('h1');\r\n\t\tresetButton.textContent = 'New Colors';\r\n\t\tmessageDisplay.textContent = '';\r\n\t\tfor (let i = 0; i < modeButtons.length; i++) {\r\n\t\t\tmodeButtons[i].classList.remove('selected');\r\n\t\t}\r\n\t\tlet updates = this.props;\r\n\t\tif (event.target.value === 'Easy') {\r\n\t\t\tmodeButtons[0].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Easy', numS: 3 };\r\n\t\t} else if (event.target.value === 'Hard') {\r\n\t\t\tmodeButtons[1].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Hard', numS: 6 };\r\n\t\t} else if (event.target.value === 'Expert') {\r\n\t\t\tmodeButtons[2].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Expert', numS: 9 };\r\n\t\t} else {\r\n\t\t\tmodeButtons[3].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Master', numS: 12 };\r\n\t\t}\r\n\t\tupdates = { ...updates, pickedColor: pickWinningColor(updates.numS) };\r\n\t\tupdates = { ...updates, colors: getRandomColors(updates.numS) };\r\n\t\th1.style.backgroundColor = 'steelblue';\r\n\t\tthis.props.changeGameMode(updates.mode, updates.numS, updates.pickedColor, updates.colors);\r\n\t};\r\n\r\n\trenderList = () => {\r\n\t\tif (this.props.colors[0] !== 'undefined') {\r\n\t\t\tconst randomSquareColor = this.props.colors.map((bgColor) => {\r\n\t\t\t\treturn <Squares square={bgColor} key={bgColor} value={bgColor} squareChoice={this.onSquareClick} />;\r\n\t\t\t});\r\n\t\t\treturn randomSquareColor;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\tonSquareClick = (event) => {\r\n\t\tlet resetButton = document.querySelector('#reset');\r\n\t\tlet messageDisplay = document.querySelector('#message');\r\n\t\tlet h1 = document.querySelector('h1');\r\n\t\tlet pickedColor = this.props.colors[this.props.pickedColor];\r\n\t\tif (event.target.style.backgroundColor === pickedColor) {\r\n\t\t\tmessageDisplay.textContent = 'Winner';\r\n\t\t\tthis.changeColorsWin(pickedColor);\r\n\t\t\tresetButton.textContent = 'Play Again?';\r\n\t\t\th1.style.backgroundColor = pickedColor;\r\n\t\t} else {\r\n\t\t\tevent.target.style.backgroundColor = '#232323';\r\n\t\t\tmessageDisplay.textContent = 'Try Again';\r\n\t\t}\r\n\t};\r\n\r\n\tchangeColorsWin = (winningColor) => {\r\n\t\tlet squares = document.querySelectorAll('.square');\r\n\t\tfor (let i = 0; i < squares.length; i++) {\r\n\t\t\tsquares[i].style.backgroundColor = winningColor;\r\n\t\t}\r\n\t};\r\n\r\n\tonResetButtonClick = () => {\r\n\t\tlet resetButton = document.querySelector('#reset');\r\n\t\tlet messageDisplay = document.querySelector('#message');\r\n\t\tlet h1 = document.querySelector('h1');\r\n\t\tlet newColors = getRandomColors(this.props.numS);\r\n\t\tlet newWinColor = pickWinningColor(this.props.numS);\r\n\t\tmessageDisplay.textContent = '';\r\n\t\th1.style.backgroundColor = 'steelblue';\r\n\t\tresetButton.textContent = 'New Colors';\r\n\t\tthis.props.newGame(this.props.mode, this.props.numS, newWinColor, newColors);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Header props={this.props} />\r\n\t\t\t\t<Stripe changeMode={this.onModeSelect} newGame={this.onResetButtonClick} />\r\n\t\t\t\t<SquareDisplay children={this.renderList} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n\treturn {\r\n\t\tmode        : state.gameMode.mode,\r\n\t\tnumS        : state.gameMode.numS,\r\n\t\tpickedColor : state.gameMode.pickedColor,\r\n\t\tcolors      : state.gameMode.colors,\r\n\t};\r\n};\r\n\r\nexport default connect(mapStatesToProps, { changeGameMode, newGame })(App);\r\n","import { CHANGE_GAME_MODE, NEW_GAME } from './types';\r\n\r\nexport const changeGameMode = (newMode, newNumS, newPickedColor, newColors) => {\r\n\treturn {\r\n\t\ttype    : CHANGE_GAME_MODE,\r\n\t\tpayload : {\r\n\t\t\tmode        : newMode,\r\n\t\t\tnumS        : newNumS,\r\n\t\t\tpickedColor : newPickedColor,\r\n\t\t\tcolors      : newColors,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const newGame = (curMode, curNumS, newPickedColor, newColors) => {\r\n\treturn {\r\n\t\ttype    : NEW_GAME,\r\n\t\tpayload : {\r\n\t\t\tmode        : curMode,\r\n\t\t\tnumS        : curNumS,\r\n\t\t\tpickedColor : newPickedColor,\r\n\t\t\tcolors      : newColors,\r\n\t\t},\r\n\t};\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nimport App from './components/App';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(reduxThunk)));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}