{"version":3,"sources":["components/Header.jsx","components/Stripe.jsx","components/SquareDisplay.jsx","components/Squares.jsx","components/App.jsx","index.js"],"names":["Header","_ref","colors","pickColor","react_default","a","createElement","id","concat","Stripe","props","onClick","newGame","changeMode","value","className","SquareDisplay","children","Squares","divStyle","backgroundColor","square","squareChoice","style","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomColor","r","Math","ceil","random","g","b","pickWinningColor","numSquares","setS","pcindex","setState","pickedColor","console","log","state","generateRandomColorsArray","rc","i","toConsumableArray","onModeSelect","event","modeButtons","document","querySelectorAll","resetButton","querySelector","messageDisplay","h1","textContent","length","classList","remove","updates","target","add","objectSpread","mode","numS","renderList","map","bgColor","components_Squares","key","onSquareClick","changeColorsWin","winningColor","squares","onResetButtonClick","components_Header","components_Stripe","components_SquareDisplay","Component","ReactDOM","render","src_components_App"],"mappings":"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","file":"static/js/main.6793827e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ colors, pickColor }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>\r\n\t\t\t\tThe Great<br />\r\n\t\t\t\t<span id='colorDisplay'>{`${colors[pickColor]}`}</span>\r\n\t\t\t\t<br />Game\r\n\t\t\t</h1>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Stripe = (props) => {\r\n\treturn (\r\n\t\t<div id='stripe'>\r\n\t\t\t<button id='reset' onClick={props.newGame}>\r\n\t\t\t\tNew Colors\r\n\t\t\t</button>\r\n\t\t\t<span id='message' />\r\n\t\t\t<button onClick={props.changeMode} value='Easy' className='mode'>\r\n\t\t\t\tEasy\r\n\t\t\t</button>\r\n\t\t\t<button onClick={props.changeMode} value='Hard' className='mode selected'>\r\n\t\t\t\tHard\r\n\t\t\t</button>\r\n\t\t\t<button onClick={props.changeMode} value='Expert' className='mode'>\r\n\t\t\t\tExpert\r\n\t\t\t</button>\r\n\t\t\t<button onClick={props.changeMode} value='Master' className='mode'>\r\n\t\t\t\tMaster\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Stripe;\r\n","import React from 'react';\r\n\r\nconst SquareDisplay = (props) => {\r\n\treturn <div id='container'>{props.children()}</div>;\r\n};\r\n\r\nexport default SquareDisplay;\r\n","import React from 'react';\r\n\r\nconst Squares = (props) => {\r\n\tlet divStyle = { backgroundColor: props.square };\r\n\treturn <div onClick={props.squareChoice} className='square' style={divStyle} />;\r\n};\r\n\r\nexport default Squares;\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Stripe from './Stripe';\r\nimport SquareDisplay from './SquareDisplay';\r\nimport Squares from './Squares';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmode        : 'Hard', //default Mode\r\n\t\t\tnumS        : 6, //default Mode\r\n\t\t\tpickedColor : 0, //winning Color\r\n\t\t\tcolors      : [], // random Colors\r\n\t\t};\r\n\t}\r\n\r\n\trandomColor = () => {\r\n\t\tlet r = Math.ceil(Math.random() * 256);\r\n\t\tlet g = Math.ceil(Math.random() * 256);\r\n\t\tlet b = Math.ceil(Math.random() * 256);\r\n\t\treturn `rgb(${r}, ${g}, ${b})`;\r\n\t};\r\n\r\n\tpickWinningColor = (numSquares, setS) => {\r\n\t\tlet pcindex = Math.ceil(Math.random() * numSquares - 1);\r\n\t\tif (!setS) {\r\n\t\t\treturn pcindex;\r\n\t\t} else {\r\n\t\t\tthis.setState({ pickedColor: pcindex });\r\n\t\t}\r\n\t\tconsole.log(this.state.colors[pcindex]);\r\n\t};\r\n\r\n\tgenerateRandomColorsArray = (numSquares, setS) => {\r\n\t\tlet rc = [];\r\n\t\tfor (let i = 0; i < numSquares; i++) {\r\n\t\t\trc = [ ...rc, this.randomColor() ];\r\n\t\t}\r\n\t\tif (!setS) {\r\n\t\t\treturn rc;\r\n\t\t} else {\r\n\t\t\tthis.setState({ colors: rc });\r\n\t\t}\r\n\t};\r\n\tonModeSelect = (event) => {\r\n\t\tlet modeButtons = document.querySelectorAll('.mode');\r\n\t\tlet resetButton = document.querySelector('#reset');\r\n\t\tlet messageDisplay = document.querySelector('#message');\r\n\t\tlet h1 = document.querySelector('h1');\r\n\t\tresetButton.textContent = 'New Colors';\r\n\t\tmessageDisplay.textContent = '';\r\n\t\tfor (let i = 0; i < modeButtons.length; i++) {\r\n\t\t\tmodeButtons[i].classList.remove('selected');\r\n\t\t}\r\n\t\tlet updates = this.state;\r\n\t\tif (event.target.value === 'Easy') {\r\n\t\t\tmodeButtons[0].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Easy', numS: 3 };\r\n\t\t} else if (event.target.value === 'Hard') {\r\n\t\t\tmodeButtons[1].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Hard', numS: 6 };\r\n\t\t} else if (event.target.value === 'Expert') {\r\n\t\t\tmodeButtons[2].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Expert', numS: 9 };\r\n\t\t} else {\r\n\t\t\tmodeButtons[3].classList.add('selected');\r\n\t\t\tupdates = { ...updates, mode: 'Master', numS: 12 };\r\n\t\t}\r\n\t\tupdates = { ...updates, pickedColor: this.pickWinningColor(updates.numS, false) };\r\n\t\tupdates = { ...updates, colors: this.generateRandomColorsArray(updates.numS, false) };\r\n\t\th1.style.backgroundColor = 'steelblue';\r\n\t\tthis.setState({\r\n\t\t\tmode        : updates.mode,\r\n\t\t\tnumS        : updates.numS,\r\n\t\t\tpickedColor : updates.pickedColor,\r\n\t\t\tcolors      : updates.colors,\r\n\t\t});\r\n\t};\r\n\trenderList = () => {\r\n\t\tif (this.state.colors[0] !== 'undefined') {\r\n\t\t\tconst randomSquareColor = this.state.colors.map((bgColor) => {\r\n\t\t\t\treturn <Squares square={bgColor} key={bgColor} value={bgColor} squareChoice={this.onSquareClick} />;\r\n\t\t\t});\r\n\t\t\treturn randomSquareColor;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\tonSquareClick = (event) => {\r\n\t\tlet resetButton = document.querySelector('#reset');\r\n\t\tlet messageDisplay = document.querySelector('#message');\r\n\t\tlet h1 = document.querySelector('h1');\r\n\t\tlet pickedColor = this.state.colors[this.state.pickedColor];\r\n\t\tif (event.target.style.backgroundColor === pickedColor) {\r\n\t\t\tmessageDisplay.textContent = 'Winner';\r\n\t\t\tthis.changeColorsWin(pickedColor);\r\n\t\t\tresetButton.textContent = 'Play Again?';\r\n\t\t\th1.style.backgroundColor = pickedColor;\r\n\t\t} else {\r\n\t\t\tevent.target.style.backgroundColor = '#232323';\r\n\t\t\tdocument.querySelector('#message').textContent = 'Try Again';\r\n\t\t}\r\n\t};\r\n\r\n\tchangeColorsWin = (winningColor) => {\r\n\t\tlet squares = document.querySelectorAll('.square');\r\n\t\tfor (let i = 0; i < squares.length; i++) {\r\n\t\t\tsquares[i].style.backgroundColor = winningColor;\r\n\t\t}\r\n\t};\r\n\r\n\tonResetButtonClick = () => {\r\n\t\tlet resetButton = document.querySelector('#reset');\r\n\t\tlet messageDisplay = document.querySelector('#message');\r\n\t\tlet h1 = document.querySelector('h1');\r\n\t\tlet newGame = this.state;\r\n\t\tmessageDisplay.textContent = '';\r\n\t\th1.style.backgroundColor = 'steelblue';\r\n\t\tresetButton.textContent = 'New Colors';\r\n\t\tthis.setState({ mode: this.state.mode });\r\n\t\tnewGame = { ...newGame, pickedColor: this.pickWinningColor(newGame.numS, false) };\r\n\t\tnewGame = { ...newGame, colors: this.generateRandomColorsArray(newGame.numS, false) };\r\n\t\tthis.setState({\r\n\t\t\tpickedColor : newGame.pickedColor,\r\n\t\t\tcolors      : newGame.colors,\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentWillMount() {\r\n\t\tthis.pickWinningColor(this.state.numS, true);\r\n\t\tthis.generateRandomColorsArray(this.state.numS, true);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Header colors={this.state.colors} pickColor={this.state.pickedColor} />\r\n\t\t\t\t<Stripe changeMode={this.onModeSelect} newGame={this.onResetButtonClick} />\r\n\t\t\t\t<SquareDisplay children={this.renderList} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}